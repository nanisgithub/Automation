Here’s a robust and flexible solution incorporating your latest requirements clearly and effectively for SQL Server 2016, ensuring:
	•	Column mapping between Standard and Dynamic tables
	•	Ability to configure additional filters dynamically (per HealthPlan/File)
	•	Date range filters
	•	Using FOR XML PATH instead of STRING_AGG

⸻

Step-by-Step Implementation:

Step 1: Enhanced Metadata Tables

Column mapping between Standard and Dynamic tables:

CREATE TABLE ComparisonColumnMapping (
    HealthPlan NVARCHAR(100),
    StandardTableColumn NVARCHAR(100),
    DynamicTableColumn NVARCHAR(100),
    IsActive BIT DEFAULT 1,
    PRIMARY KEY (HealthPlan, StandardTableColumn, DynamicTableColumn)
);

Additional Filters Table:

CREATE TABLE ComparisonAdditionalFilters (
    FilterID INT IDENTITY PRIMARY KEY,
    HealthPlan NVARCHAR(100),
    TableType NVARCHAR(20), -- 'Standard' or 'Dynamic'
    FilterCondition NVARCHAR(MAX), -- Example: 'Status = ''Paid'' AND Region = ''North'''
    IsActive BIT DEFAULT 1
);

Example population:

INSERT INTO ComparisonAdditionalFilters (HealthPlan, TableType, FilterCondition)
VALUES
('HealthPlanA', 'Standard', 'Region = ''East'''),
('HealthPlanA', 'Dynamic', 'Status = ''Paid'' AND Region = ''East''');



⸻

Step 2: Stored Procedure using Dynamic SQL (SQL Server 2016 compatible)

Here’s a comprehensive stored procedure:

CREATE PROCEDURE usp_CompareAndLogDataVariances
    @DynamicTable NVARCHAR(128),
    @ProcessID INT,
    @FileName NVARCHAR(256),
    @DOSStart DATE,
    @DOSEnd DATE,
    @PaidDateStart DATE,
    @PaidDateEnd DATE,
    @HealthPlan NVARCHAR(100)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE 
        @StandardTable NVARCHAR(128) = 'StandardTable',
        @sql NVARCHAR(MAX),
        @joinConditions NVARCHAR(MAX) = '',
        @StdFilter NVARCHAR(MAX) = '',
        @DynFilter NVARCHAR(MAX) = '',
        @Column NVARCHAR(200);

    -- Build JOIN conditions
    SELECT @joinConditions = STUFF((
        SELECT ' AND ISNULL(S.' + QUOTENAME(StandardTableColumn) + ','''') = ISNULL(D.' + QUOTENAME(DynamicTableColumn) + ','''')'
        FROM ComparisonColumnMapping
        WHERE HealthPlan = @HealthPlan AND IsActive = 1
        FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 5, '');

    -- Fetch additional filters
    SELECT @StdFilter = STUFF((
        SELECT ' AND (' + FilterCondition + ')'
        FROM ComparisonAdditionalFilters
        WHERE HealthPlan = @HealthPlan AND TableType = 'Standard' AND IsActive = 1
        FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 5, '');

    SELECT @DynFilter = STUFF((
        SELECT ' AND (' + FilterCondition + ')'
        FROM ComparisonAdditionalFilters
        WHERE HealthPlan = @HealthPlan AND TableType = 'Dynamic' AND IsActive = 1
        FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 5, '');

    -- Fetch Dynamic Column Names for insertion
    DECLARE 
        @DynClaimNumber NVARCHAR(128), @DynClaimLine NVARCHAR(128),
        @DynDOSFrom NVARCHAR(128), @DynPaidDate NVARCHAR(128),
        @DynServiceCode NVARCHAR(128), @DynPaidAmount NVARCHAR(128),
        @DynMemberID NVARCHAR(128);

    SELECT
        @DynClaimNumber = MAX(CASE WHEN StandardTableColumn = 'ClaimNumber' THEN DynamicTableColumn END),
        @DynClaimLine = MAX(CASE WHEN StandardTableColumn = 'ClaimLine' THEN DynamicTableColumn END),
        @DynDOSFrom = MAX(CASE WHEN StandardTableColumn = 'DOSFrom' THEN DynamicTableColumn END),
        @DynPaidDate = MAX(CASE WHEN StandardTableColumn = 'PaidDate' THEN DynamicTableColumn END),
        @DynServiceCode = MAX(CASE WHEN StandardTableColumn = 'ServiceCode' THEN DynamicTableColumn END),
        @DynPaidAmount = MAX(CASE WHEN StandardTableColumn = 'PaidAmount' THEN DynamicTableColumn END),
        @DynMemberID = MAX(CASE WHEN StandardTableColumn = 'MemberID' THEN DynamicTableColumn END)
    FROM ComparisonColumnMapping
    WHERE HealthPlan = @HealthPlan;

    -- Build dynamic SQL
    SET @sql = '
    INSERT INTO DataVarianceLog (HealthPlan, ProcessID, FileName, IssueType, ClaimNumber, ClaimLine, DOSFrom, PaidDate, ServiceCode, PaidAmount, MemberID)
    SELECT 
        ''' + @HealthPlan + ''', ' + CAST(@ProcessID AS NVARCHAR(20)) + ', ''' + @FileName + ''', 
        ''Mismatch in Dynamic Table'', 
        D.' + QUOTENAME(@DynClaimNumber) + ', D.' + QUOTENAME(@DynClaimLine) + ',
        D.' + QUOTENAME(@DynDOSFrom) + ', D.' + QUOTENAME(@DynPaidDate) + ',
        D.' + QUOTENAME(@DynServiceCode) + ', D.' + QUOTENAME(@DynPaidAmount) + ',
        D.' + QUOTENAME(@DynMemberID) + '
    FROM ' + QUOTENAME(@DynamicTable) + ' AS D
    LEFT JOIN ' + QUOTENAME(@StandardTable) + ' AS S ON ' + @joinConditions + '
    WHERE S.' + QUOTENAME('ClaimNumber') + ' IS NULL
      AND D.' + QUOTENAME(@DynDOSFrom) + ' BETWEEN @DOSStart AND @DOSEnd
      AND D.' + QUOTENAME(@DynPaidDate) + ' BETWEEN @PaidDateStart AND @PaidDateEnd ' + ISNULL(@DynFilter, '') + '

    UNION ALL

    SELECT 
        ''' + @HealthPlan + ''', ' + CAST(@ProcessID AS NVARCHAR(20)) + ', ''' + @FileName + ''', 
        ''Mismatch in Standard Table'', 
        S.ClaimNumber, S.ClaimLine, S.DOSFrom, S.PaidDate, S.ServiceCode, S.PaidAmount, S.MemberID
    FROM ' + QUOTENAME(@StandardTable) + ' AS S
    LEFT JOIN ' + QUOTENAME(@DynamicTable) + ' AS D ON ' + @joinConditions + '
    WHERE D.' + QUOTENAME(@DynClaimNumber) + ' IS NULL
      AND S.DOSFrom BETWEEN @DOSStart AND @DOSEnd
      AND S.PaidDate BETWEEN @PaidDateStart AND @PaidDateEnd ' + ISNULL(@StdFilter, '') + ';';

    -- Execute dynamic SQL
    EXEC sp_executesql @sql,
        N'@DOSStart DATE, @DOSEnd DATE, @PaidDateStart DATE, @PaidDateEnd DATE',
        @DOSStart, @DOSEnd, @PaidDateStart, @PaidDateEnd;
END;



⸻

Step 3: Example Execution

EXEC usp_CompareAndLogDataVariances
    @DynamicTable = 'ClaimTable_20240323',
    @ProcessID = 123,
    @FileName = 'Claims_File_20240323.csv',
    @DOSStart = '2024-01-01',
    @DOSEnd = '2024-02-01',
    @PaidDateStart = '2024-01-15',
    @PaidDateEnd = '2024-02-15',
    @HealthPlan = 'HealthPlanA';



⸻

Advantages of This Approach:
	•	Dynamic Column Mapping: Flexibility to map columns with differing names between tables.
	•	Additional Filters: Customize filters for specific tables, files, or HealthPlans, enabling exact “apples-to-apples” comparisons.
	•	Compatibility: Fully SQL Server 2016 compliant without relying on modern functions like STRING_AGG.

Feel free to review this carefully and let me know if you have further refinements!





Absolutely! Using intermediate temporary tables to pre-filter and store relevant subsets before comparing is a best practice for performance, especially with large tables.

Here’s a clear and structured approach:

⸻

Step 1: Create Temp Table Subsets First

Within your stored procedure, create two temp tables (#DynamicSubset and #StandardSubset) that apply your filters beforehand, significantly reducing the comparison dataset size.

Here’s a structured way:

-- Temp Dynamic table subset
DECLARE @DynamicSQL NVARCHAR(MAX);
SET @DynamicSQL = '
SELECT 
    ' + @DynClaimNumber + ' AS ClaimNumber,
    ' + @DynClaimLine + ' AS ClaimLine,
    ' + @DynDOSFrom + ' AS DOSFrom,
    ' + @DynPaidDate + ' AS PaidDate,
    ' + @DynServiceCode + ' AS ServiceCode,
    ' + @DynPaidAmount + ' AS PaidAmount,
    ' + @DynMemberID + ' AS MemberID
INTO #DynamicSubset
FROM ' + QUOTENAME(@DynamicTable) + ' AS D
WHERE D.' + QUOTENAME(@DynDOSFrom) + ' BETWEEN @DOSStart AND @DOSEnd
  AND D.' + QUOTENAME(@DynPaidDate) + ' BETWEEN @PaidDateStart AND @PaidDateEnd
  ' + ISNULL(@DynFilter, '') + ';
';

EXEC sp_executesql @DynamicSQL,
    N'@DOSStart DATE, @DOSEnd DATE, @PaidDateStart DATE, @PaidDateEnd DATE',
    @DOSStart, @DOSEnd, @PaidDateStart, @PaidDateEnd;

-- Add indexes for faster joins
CREATE CLUSTERED INDEX IDX_DynSubset ON #DynamicSubset (ClaimNumber, ClaimLine, DOSFrom, PaidDate);



⸻

Similarly, create a temp subset of your Standard table:

-- Temp Standard table subset
SELECT 
    ClaimNumber,
    ClaimLine,
    DOSFrom,
    PaidDate,
    ServiceCode,
    PaidAmount,
    MemberID
INTO #StandardSubset
FROM StandardTable AS S
WHERE S.DOSFrom BETWEEN @DOSStart AND @DOSEnd
  AND S.PaidDate BETWEEN @PaidDateStart AND @PaidDateEnd
  ' + ISNULL(@StdFilter, '') + ';

-- Add indexes for faster joins
CREATE CLUSTERED INDEX IDX_StdSubset ON #StandardSubset (ClaimNumber, ClaimLine, DOSFrom, PaidDate);



⸻

Step 2: Run Variance Comparisons on Temp Tables

Now, perform your comparisons against these pre-filtered temp tables:

-- Insert into your DataVarianceLog from subsets
INSERT INTO DataVarianceLog (HealthPlan, ProcessID, FileName, IssueType, ClaimNumber, ClaimLine, DOSFrom, PaidDate, ServiceCode, PaidAmount, MemberID)
SELECT 
    @HealthPlan, @ProcessID, @FileName,
    'Mismatch in Dynamic Table',
    D.ClaimNumber, D.ClaimLine, D.DOSFrom, D.PaidDate, D.ServiceCode, D.PaidAmount, D.MemberID
FROM #DynamicSubset AS D
LEFT JOIN #StandardSubset AS S
    ON ISNULL(S.ClaimNumber, '') = ISNULL(D.ClaimNumber, '')
    AND ISNULL(S.ClaimLine, '') = ISNULL(D.ClaimLine, '')
    AND ISNULL(S.DOSFrom, '') = ISNULL(D.DOSFrom, '')
    AND ISNULL(S.PaidDate, '') = ISNULL(D.PaidDate, '')
    AND ISNULL(S.ServiceCode, '') = ISNULL(D.ServiceCode, '')
    AND ISNULL(S.PaidAmount, '') = ISNULL(D.PaidAmount, '')
    AND ISNULL(S.MemberID, '') = ISNULL(D.MemberID, '')
WHERE S.ClaimNumber IS NULL

UNION ALL

SELECT 
    @HealthPlan, @ProcessID, @FileName,
    'Mismatch in Standard Table',
    S.ClaimNumber, S.ClaimLine, S.DOSFrom, S.PaidDate, S.ServiceCode, S.PaidAmount, S.MemberID
FROM #StandardSubset AS S
LEFT JOIN #DynamicSubset AS D
    ON ISNULL(S.ClaimNumber, '') = ISNULL(D.ClaimNumber, '')
    AND ISNULL(S.ClaimLine, '') = ISNULL(D.ClaimLine, '')
    AND ISNULL(S.DOSFrom, '') = ISNULL(D.DOSFrom, '')
    AND ISNULL(S.PaidDate, '') = ISNULL(D.PaidDate, '')
    AND ISNULL(S.ServiceCode, '') = ISNULL(D.ServiceCode, '')
    AND ISNULL(S.PaidAmount, '') = ISNULL(D.PaidAmount, '')
    AND ISNULL(S.MemberID, '') = ISNULL(D.MemberID, '')
WHERE D.ClaimNumber IS NULL;



⸻

Step 3: Cleanup

The temporary tables are automatically cleaned up at the end of your stored procedure execution, so no additional steps needed.

⸻

Performance Advantages:
	•	Efficiency: Pre-filtering significantly reduces comparison dataset size.
	•	Faster Joins: Temporary table indexing greatly improves JOIN performance.
	•	Reduced Load: Lowers resource consumption on your database.

⸻

Summary of Steps Clearly Stated:
	1.	Create subsets with temp tables.
	2.	Add indexes to subsets.
	3.	Perform comparison using these small subsets.
	4.	Log variances into your variance table.
	5.	Temp tables auto-drop at procedure completion.

⸻

This structure ensures clarity, efficiency, and scalability in your variance detection process, especially with large data. Let me know if you have any questions or additional refinements!