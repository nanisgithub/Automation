{% test cross_reference_lookup_check(model, source_columns, lookup_table, lookup_column, threshold, test_name) %}

WITH source_data AS (
    SELECT * FROM {{ model }}
),

error_data AS (
    SELECT *
    FROM {{ model }}
    WHERE
    (
        {% for col_expr in source_columns %}
            ({{ col_expr }} NOT IN (SELECT {{ lookup_column }} FROM {{ lookup_table }}))
            {% if not loop.last %}
                OR
            {% endif %}
        {% endfor %}
    )
)

-- same summary + logging logic as other macros...

{% endtest %}



- cross_reference_lookup_check:
    source_columns: ["REPLACE(DX1, '.', '')", "REPLACE(DX2, '.', '')"]
    lookup_table: "Contract.MSTR_ICD_Curr"
    lookup_column: "DiagnosisCode_NoDec"
    threshold: 5
    test_name: "DX1_DX2_Lookup_Check"





# models/intermediate/intermediate_models.yml
models:
  - name: int_claims_validation_flags
    columns:
      - name: is_invalid_denied_claim_payment
        description: "Flag is TRUE if ClaimStatus is DENIED/D but ServicePaidAmount is not 0."
        tests:
          - accepted_values:
              values: [false] # Test fails if any TRUE values exist for this flag
              config:
                severity: warn # Or error
      - name: is_invalid_reversed_claim_payment
        description: "Flag is TRUE if ClaimStatus is REVERSED/R but ServicePaidAmount > 0."
        tests:
          - accepted_values:
              values: [false]
      - name: is_invalid_paid_claim_payment
        description: "Flag is TRUE if ClaimStatus is PAID/P but ServicePaidAmount < 0."
        tests:
          - accepted_values:
              values: [false]
      - name: is_invalid_zero_allowed_vs_payment
        description: "Flag is TRUE if AllowedAmount is 0 but ServicePaidAmount is not 0."
        tests:
          - accepted_values:
              values: [false]
      - name: is_invalid_zero_submitted_vs_payment
        description: "Flag is TRUE if SubmittedAmount is 0 but ServicePaidAmount is not 0."
        tests:
          - accepted_values:
              values: [false]




- rules_engine_check:
    rules:
      - column: "ClaimStatus"
        match_values: ["PAID", "P"]
        amount_column: "ServicePaidAmount"
        allowed_value_condition: "= 0"

      - column: "ClaimStatus"
        match_values: ["DENIED", "D"]
        amount_column: "ServicePaidAmount"
        allowed_value_condition: "<> 0"

    threshold: 5
    test_name: "ClaimStatus_Amount_Logic"




{% test rules_engine_check(model, rules, threshold, test_name) %}

WITH source_data AS (
    SELECT * FROM {{ model }}
),

error_data AS (
    SELECT *
    FROM {{ model }}
    WHERE
        {% for rule in rules %}
            (
                {{ rule.column }} IN (
                    {% for val in rule.match_values %}
                        '{{ val }}'{% if not loop.last %}, {% endif %}
                    {% endfor %}
                )
                AND CAST({{ rule.amount_column }} AS money) {{ rule.allowed_value_condition }}
            )
            {% if not loop.last %}
                OR
            {% endif %}
        {% endfor %}
)

SELECT
    CASE
        WHEN total_records.total_count = 0 THEN 0
        ELSE (error_records.error_count * 100.0 / total_records.total_count)
    END AS error_percentage
FROM
    (SELECT COUNT(*) AS total_count FROM source_data) AS total_records,
    (SELECT COUNT(*) AS error_count FROM error_data) AS error_records
HAVING
    CASE
        WHEN total_records.total_count = 0 THEN 0
        ELSE (error_records.error_count * 100.0 / total_records.total_count)
    END > {{ threshold }}




{% test conditional_value_check(model, column, match_values, check_column, check_condition, threshold, test_name) %}

WITH source_data AS (
    SELECT * FROM {{ model }}
),

error_data AS (
    SELECT *
    FROM source_data
    WHERE (
        {{ column }} IN (
            {% for val in match_values %}
                {% if val is string %}
                    '{{ val }}'{% if not loop.last %}, {% endif %}
                {% else %}
                    {{ val }}{% if not loop.last %}, {% endif %}
                {% endif %}
            {% endfor %}
        )
        AND {{ check_column }} {{ check_condition }}
    )
)

