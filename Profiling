{% macro log_profile_to_summary(model, columns, test_name) %}
  {% if columns is not none %}
    {% for col in columns %}
      {% call statement('log_profile_' ~ col, fetch_result=False) %}
      DECLARE @total_count INT, @null_count INT, @null_pct FLOAT, @distinct_count INT, @min_val NVARCHAR(100), @max_val NVARCHAR(100);

      SELECT
        @total_count = COUNT(*),
        @null_count = COUNT(*) - COUNT({{ col }}),
        @null_pct = CASE WHEN COUNT(*) = 0 THEN 0 ELSE CAST(COUNT(*) - COUNT({{ col }}) AS FLOAT) / COUNT(*) * 100 END,
        @distinct_count = COUNT(DISTINCT {{ col }}),
        @min_val = CAST(MIN({{ col }}) AS NVARCHAR),
        @max_val = CAST(MAX({{ col }}) AS NVARCHAR)
      FROM {{ model }};

      DELETE FROM NonDelegatedClaims.dbo.DBT_NDC_Validation_SummaryLog
      WHERE HealthPlan = '{{ var("healthplan") }}'
        AND ProcessID = '{{ var("processid") }}'
        AND ModelName = '{{ model.name }}'
        AND TestName = '{{ test_name }}_{{ col }}';

      INSERT INTO NonDelegatedClaims.dbo.DBT_NDC_Validation_SummaryLog
        (HealthPlan, ProcessID, ModelName, TestName, TotalRecords, NullCount, NullPct, DistinctCount, MinValue, MaxValue, CreatedAt)
      VALUES
        ('{{ var("healthplan") }}', '{{ var("processid") }}', '{{ model.name }}', '{{ test_name }}_{{ col }}',
         @total_count, @null_count, @null_pct, @distinct_count, @min_val, @max_val, GETDATE());
      {% endcall %}
    {% endfor %}
  {% else %}
    {{ exceptions.raise_compiler_error("The 'columns' list (var('profiling_columns')) is None or not passed.") }}
  {% endif %}
{% endmacro %}

-- ============================================================================
-- Model: ndc_profile_summary_log.sql
--
-- Purpose:
--   This model exists solely to trigger the log_profile_to_summary macro,
--   which logs profiling statistics into the ndc_validation_summary_log table.
--
-- Note:
--   This model does not materialize any table or view. It only executes logic.
--   Setting `materialized='ephemeral'` tells dbt not to persist anything.
-- ============================================================================

{{ config(
    materialized='ephemeral'
) }}

{{ log_profile_to_summary(
    ref('NDC_FileValidation_SourceData'),
    var('profiling_columns'),
    'ColumnProfile'
) }}




## ðŸ“‚ Folder Structure Overview

This project follows a clean and modular layout for profiling and rule-based validation in DBT.

```plaintext
NDC_Data_Validation/
â”‚
â”œâ”€â”€ macros/
â”‚   â”œâ”€â”€ validations/                     # Macros for rule-based checks (null, expressions, conditions)
â”‚   â””â”€â”€ profiling/                       # Macros for profiling metrics and logging
â”‚
â”œâ”€â”€ models/
â”‚   â”œâ”€â”€ staging/                         # Source-layer models
â”‚   â”‚   â””â”€â”€ NDC_FileValidation_SourceData.sql

â”‚   â”œâ”€â”€ validations/                     # YAML file for DBT tests (rule-based)
â”‚   â”‚   â””â”€â”€ NDC_RuleCheck.yml

â”‚   â”œâ”€â”€ profiling/                       # YAML + ephemeral model to run column profiling
â”‚   â”‚   â”œâ”€â”€ NDC_ProfilingCheck.yml       # vars: list of profiling columns
â”‚   â”‚   â””â”€â”€ ndc_profile_summary_log.sql  # triggers macro, logs stats to summary log

â”‚   â””â”€â”€ reference_datasets/              # Any lookup tables (e.g., ICD codes)
â”‚       â””â”€â”€ reference_icd_codes.sql