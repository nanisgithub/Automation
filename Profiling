version: 2

models:
  - name: NDC_FileValidation_SourceData
    description: "NDC File Data Validation and Profiling"

    config:
      tags: ['validation', 'profiling']

    vars:
      profiling_columns:
        - ClaimNumber
        - MemberID
        - ServiceCode

    tests:
      - column_null_check:
          columns: "PlaceofService,BillType"
          threshold: 5
          test_name: "PlaceofService_BillType_NullCheck"

      - column_null_check:
          columns: "PrimaryDiagCode,SecondaryDiagCode,DiagCode3,DiagCode4,DiagCode5"
          threshold: 5
          test_name: "DX1_DX5_NullCheck"

      - reference_table_check:
          source_columns: ["REPLACE(PrimaryDiagCode, '.', '')", "REPLACE(SecondaryDiagCode, '.', '')"]
          lookup_table: "Contract.MSTR.ICD_Curr"
          lookup_column: "DiagnosisCode_NoDec"
          threshold: 5
          test_name: "DX1_DX2_Lookup_Check"

      - reference_table_check:
          source_columns: ["LEFT(LTRIM(RTRIM(ServiceCode)), 5)"]
          lookup_table: "Contract.MSTR.CPT_Curr"
          lookup_column: "ServiceCode"
          threshold: 5
          test_name: "ServiceCode_Lookup_Check"

      - conditional_value_check:
          column: "ClaimStatus"
          match_values: ["PAID", "P"]
          check_column: "ServicePaidAmount"
          check_condition: "< 0"
          threshold: 5
          test_name: "PaidClaims_PositivePaidAmount_Check"

      - data_integrity_check:
          sql: |
            SELECT COUNT(*)
            FROM (
              SELECT ClaimNumber, ClaimLine, COUNT(*)
              FROM {{ model }}
              GROUP BY ClaimNumber, ClaimLine
              HAVING COUNT(*) > 1
            ) A
          threshold: 0
          test_name: "Duplicate_ClaimLines_Check"

      - data_integrity_check:
          sql: |
            WITH cte AS (
              SELECT ClaimNumber, ClaimLine,
                     LEAD(CAST(ClaimLine AS INT)) OVER (PARTITION BY ClaimNumber ORDER BY CAST(ClaimLine AS INT)) AS NextClaimLine
              FROM {{ model }}
            )
            SELECT SUM(MissingLines)
            FROM (
              SELECT ClaimNumber,
                     NextClaimLine - CAST(ClaimLine AS INT) - 1 AS MissingLines
              FROM cte
              WHERE CAST(ClaimLine AS INT) < NextClaimLine - 1
            ) MissingLinesTable
          threshold: 0
          test_name: "Missing_ClaimLines_Check"




{% test data_integrity_check(model, sql, threshold, test_name) %}
  {% set rendered_sql = sql | replace("{{ model }}", model) %}

  WITH result AS (
    {{ rendered_sql }}
  )
  SELECT
    CASE WHEN result_count > {{ threshold }} THEN 1 ELSE 0 END AS test_result
  FROM (
    SELECT COALESCE(MAX(CAST(result_column AS INT)), 0) AS result_count
    FROM result
  ) r
{% endtest %}





{% test data_integrity_check(model, sql, threshold, test_name) %}
  {% set rendered_sql = sql | replace("{{ model }}", model) %}

  WITH source_data AS (
    SELECT * FROM {{ model }}
  ),
  error_data AS (
    {{ rendered_sql }}
  )
  SELECT
    CASE WHEN error_count > {{ threshold }} THEN 1 ELSE 0 END AS test_result
  FROM (
    SELECT
      (SELECT COUNT(*) FROM source_data) AS total_count,
      (SELECT COALESCE(MAX(CAST(result_column AS INT)), 0) FROM error_data) AS error_count
  ) x;

  {% call statement('log_result_' ~ test_name, fetch_result=False) %}
    DECLARE @total_count INT = 0, @error_count INT = 0, @error_percentage DECIMAL(5,2) = 0.0, @result_status NVARCHAR(10) = 'PASS';

    SELECT
      @total_count = (SELECT COUNT(*) FROM {{ model }}),
      @error_count = (SELECT COALESCE(MAX(CAST(result_column AS INT)), 0) FROM ({{ rendered_sql }}) AS err);

    IF @total_count > 0
      SET @error_percentage = (100.0 * @error_count) / @total_count;

    IF @error_percentage > {{ threshold }}
      SET @result_status = 'FAIL';

    INSERT INTO NonDelegatedClaims.dbo.DBT_NDC_Validation_SummaryLog
    (HealthPlan, ProcessID, ModelName, TestCategory, TestName, TotalCount, ErrorCount, ThresholdPercentage, ErrorPercentage, ResultStatus)
    VALUES (
      '{{ var("healthplan") }}',
      '{{ var("processid") }}',
      '{{ model.name }}',
      'data_integrity',
      '{{ test_name }}',
      @total_count,
      @error_count,
      {{ threshold }},
      @error_percentage,
      @result_status
    );
  {% endcall %}
{% endtest %}