YESSSS!
That’s huge — you just crossed the hardest part of the setup!

✅ dbt installed
✅ dbt connected to SQL Server
✅ Windows Authentication working
✅ Certificates trusted
✅ dbt debug = ALL CHECKS PASSED

You’re officially ready to start building the actual validation process!

⸻

Now here’s what you should do next:

1. Create your first dbt model

Let’s create a simple starter model.

In your project under models/, create a file called:

models/claim_validations.sql

Paste this inside:

WITH source_data AS (

    SELECT *
    FROM NDC_EDI.dbo.tbl_NDC_COMMON_CLAIM_STAGING  -- Your source staging table
    WHERE 1=1
    -- You can later add dynamic HealthPlan and ProcessID filters

)

SELECT *
FROM source_data

✅ This will materialize a simple base model.

⸻

2. Create your validation rules YAML

Inside models/, create a folder validation_rules/ and add a file:

models/validation_rules/validation_rules.yml

Paste something like this:

version: 2

models:
  - name: claim_validations
    description: "Validations for Claims Staging table"

    columns:
      - name: POS_BillType_Null_Check
        description: "Check if POS and BillType are both NULL"
        tests:
          - expression_is_valid:
              expression: "(POS IS NULL AND BillType IS NULL)"
              threshold: 5

      - name: DOB_Null_Check
        description: "Check if DOB is NULL or invalid"
        tests:
          - expression_is_valid:
              expression: "(DOB IS NULL OR TRY_CAST(DOB as DATE) IS NULL)"
              threshold: 5

✅ These are your rules, replacing your SQL cursor rules from before!

⸻

3. Create your custom test macro

Inside your project under macros/, create a file:

macros/custom_tests.sql

Paste this inside:

{% test expression_is_valid(model, expression, threshold) %}

WITH total_records AS (
    SELECT COUNT(*) AS total_count FROM {{ model }}
),

error_records AS (
    SELECT COUNT(*) AS error_count
    FROM {{ model }}
    WHERE {{ expression }}
)

SELECT
    CASE
        WHEN total_count = 0 THEN 0
        ELSE (error_count * 100.0 / total_count)
    END AS error_percentage
FROM total_records
CROSS JOIN error_records
HAVING
    CASE
        WHEN total_count = 0 THEN 0
        ELSE (error_count * 100.0 / total_count)
    END > {{ threshold }}

{% endtest %}

✅ This will calculate the failed percentage and decide pass/fail.

⸻

Then finally:

Run these commands:

dbt run

(This will create the claim_validations model.)

Then:

dbt test

(This will run your validations based on YAML.)

✅ You will see output like:

PASS  claim_validations.POS_BillType_Null_Check
FAIL  claim_validations.DOB_Null_Check

✅ It will also give you how many records failed, the error percentages.

⸻

Folder structure after all this will look:

ndc_data_validation/
  ├── models/
  │    ├── claim_validations.sql
  │    ├── validation_rules/
  │    │    └── validation_rules.yml
  ├── macros/
  │    └── custom_tests.sql
  ├── dbt_project.yml
  ├── profiles.yml  (in .dbt folder)



⸻

Fast recap of what changed from your original Stored Proc

SQL Server Stored Proc	DBT + YAML
Cursor loop each rule	YAML + model
Dynamic SQL string building	Expression inside YAML
Manual error handling	dbt automatically fails tests
Harder to maintain	Easy to update
Hard to track pass/fail	dbt gives reports



⸻

You’re now 90% production ready.

Would you like me to now:
	•	Help you auto-insert failed records into your NDC_Validation_ErrorLogDetail table after failed tests?
	•	Or generate a starter ZIP project with all these templates so you can immediately move faster?

Just say:
	•	“Starter ZIP” or
	•	“Insert ErrorLog after test”

And we can go next!!
(You’re seriously doing an awesome job pushing
 this forward.)




version: 2

tests:
  - name: pos_billtype_null_check
    model: ref('claim_validations')
    test: expression_is_valid
    args:
      expression: "(POS IS NULL AND BillType IS NULL)"
      threshold: 5

  - name: dob_null_check
    model: ref('claim_validations')
    test: expression_is_valid
    args:
      expression: "(DOB IS NULL OR TRY_CAST(DOB as DATE) IS NULL)"
      threshold: 5



version: 2

models:
  - name: claim_validations
    description: "Claim validation checks for POS/BillType and DOB columns."

    tests:
      - expression_is_valid:
          expression: "(POS IS NULL AND BillType IS NULL)"
          threshold: 5

      - expression_is_valid:
          expression: "(DOB IS NULL OR TRY_CAST(DOB as DATE) IS NULL)"
          threshold: 5




{% test expression_is_valid(model, expression, threshold) %}

WITH validation_data AS (

    SELECT
        COUNT(*) AS total_count,
        SUM(CASE WHEN {{ expression }} THEN 1 ELSE 0 END) AS error_count
    FROM {{ model }}

)

SELECT
    CASE
        WHEN total_count = 0 THEN 0
        ELSE (error_count * 100.0 / total_count)
    END AS error_percentage
FROM validation_data
WHERE
    CASE
        WHEN total_count = 0 THEN 0
        ELSE (error_count * 100.0 / total_count)
    END > {{ threshold }}

{% endtest %}
